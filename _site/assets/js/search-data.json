{"0": {
    "doc": "📆 Calendar",
    "title": "📆 Calendar",
    "content": "Lectures (blue) are held in Warren Lecture Hall 2005. Discussions (blue) are held in Center Hall 115. In-person office hours (purple) are held in the new HDSI building Halıcıoğlu Data Science Institute Room 155. Remote office hours (orange) are held on Zoom at this link. ",
    "url": "/calendar/",
    "relUrl": "/calendar/"
  },"1": {
    "doc": "🏠 Home",
    "title": "Data Visualization",
    "content": "DSC 106, Winter 2024 at UC San Diego . Sam Lau he/him . lau@ucsd.edu . Lecture: TuTh 3:30-4:50PM, WLH 2005 . ⚠️ This site is under construction! Everything is subject to change. ⚠️ . Week 1 . Tue Jan 9 LEC 1 The Value of Visualization . Thu Jan 11 LEC 2 Data &amp; Image Models . Fri Jan 12 LAB 1 Altair . Week 2 . Tue Jan 16 LEC 3 Visual Encoding &amp; Design . Thu Jan 18 LEC 4 Deceptive Visualization . Fri Jan 19 LAB 2 HTML/CSS . PROJ 1 Project 1: Expository Visualization . Week 3 . Tue Jan 23 LEC 5 Exploratory Data Analysis . Thu Jan 25 LEC 6 Interaction . Fri Jan 26 LAB 3 JavaScript, SVG . Week 4 . Tue Jan 30 LEC 7 Maps . Thu Feb 1 LEC 8 Visualization Tools . Fri Feb 2 LAB 4 Svelte . PROJ 2 Project 2: Deceptive Visualization . Week 5 . Tue Feb 6 LEC 9 D3.js . Thu Feb 8 LEC 10 Animation . Fri Feb 9 PROJ 2 Project 2 Peer Review . LAB 5 D3 . Week 6 . Tue Feb 13 LEC 11 Color . Thu Feb 15 LEC 12 Prototype demos . Fri Feb 16 PROJ 3 Project 3: Interactive Visualization . LAB 6 Mapbox.js . Week 7 . Tue Feb 20 LEC 13 Perception . Thu Feb 22 LEC 14 Networks . Fri Feb 23 PROJ 3 Project 3 Peer Review, Final Project Proposal . LAB 7 Scrollytelling . Week 8 . Tue Feb 27 LEC 15 Uncertainty . Thu Feb 29 LEC 16 Scalable Visualization . Fri Mar 1 FINAL PROJ Final Project Prototype . Week 9 . Tue Mar 5 LEC 17 Evaluation &amp; Review . Thu Mar 7 LEC 18 Final Project Feedback . Fri Mar 8 FINAL PROJ Final Project Demo Video . Week 10 . Tue Mar 12 LEC 19 Narrative . Thu Mar 14 LEC 20 Final Project Showcase . Week 11 . Sat Mar 16 FINAL PROJ Final Project . ",
    "url": "/#data-visualization",
    "relUrl": "/#data-visualization"
  },"2": {
    "doc": "🏠 Home",
    "title": "🏠 Home",
    "content": " ",
    "url": "/",
    "relUrl": "/"
  },"3": {
    "doc": "📚 Resources",
    "title": "📚 Resources",
    "content": " ",
    "url": "/resources/",
    "relUrl": "/resources/"
  },"4": {
    "doc": "📚 Resources",
    "title": "Table of contents",
    "content": ". | Past Exams | Videos | Readings . | Textbooks | Extra Lecture Notebooks | Articles | Other Links | . | Regular Expressions | . ",
    "url": "/resources/#table-of-contents",
    "relUrl": "/resources/#table-of-contents"
  },"5": {
    "doc": "📚 Resources",
    "title": "Past Exams",
    "content": "Past exams with detailed solutions can be found at practice.dsc80.com. ",
    "url": "/resources/#past-exams",
    "relUrl": "/resources/#past-exams"
  },"6": {
    "doc": "📚 Resources",
    "title": "Videos",
    "content": ". | Working on Assignments in DSC 80 | Working with the command-line in DSC 80 | . ",
    "url": "/resources/#videos",
    "relUrl": "/resources/#videos"
  },"7": {
    "doc": "📚 Resources",
    "title": "Readings",
    "content": "Textbooks . | notes.dsc80.com, our course notes. | Wes McKinney. “Python for Data Analysis”. | DSC 10 Course Notes – great refresher on babypandas. | Principles and Techniques of Data Science, the textbook for Berkeley’s Data 100 course. | Computational and Inferential Thinking, the textbook for Berkeley’s Data 8 course. | . Extra Lecture Notebooks . | Lecture 11: Fast Permutation Tests. | Lecture 12: More Missingness Examples. | . Articles . | Views and Copies in pandas – a great read if you’d like to learn more about the infamous SettingWithCopyWarning. | jwilber.me/permutationtest, a great visual explanation of permutation testing. | A Visual Introduction to Machine Learning and Model Tuning and the Bias-Variance Tradeoff, excellent visual descriptions of the last few weeks of the course (some terminology is different, but the ideas are the same). | . Other Links . | pandastutor.com, the equivalent of pythontutor.com for DataFrame manipulation. | . ",
    "url": "/resources/#readings",
    "relUrl": "/resources/#readings"
  },"8": {
    "doc": "📚 Resources",
    "title": "Regular Expressions",
    "content": ". | regex101.com, a helpful site to have open while writing regular expressions. | Python re library documentation and how-to. | regex “cheat sheet” (taken from here). | . ",
    "url": "/resources/#regular-expressions",
    "relUrl": "/resources/#regular-expressions"
  },"9": {
    "doc": "👩‍🏫 Staff",
    "title": "👩‍🏫 Staff",
    "content": " ",
    "url": "/staff/",
    "relUrl": "/staff/"
  },"10": {
    "doc": "👩‍🏫 Staff",
    "title": "Instructor",
    "content": "Sam Lau he/him . lau@ucsd.edu Lecture: TuTh 3:30-4:50PM, WLH 2005 . Sam Lau is an assistant teaching professor in the Halıcıoğlu Data Science Institute at UC San Diego. His research creates novel interfaces for learning and teaching data science, including the popular Pandas Tutor tool (https://pandastutor.com/) which serves over 40,000 people per year. He is the author of an introductory data science textbook called Learning Data Science, published by O’Reilly Media in 2023. ",
    "url": "/staff/#instructor",
    "relUrl": "/staff/#instructor"
  },"11": {
    "doc": "👩‍🏫 Staff",
    "title": "Staff",
    "content": " ",
    "url": "/staff/#staff",
    "relUrl": "/staff/#staff"
  },"12": {
    "doc": "📖 Syllabus",
    "title": "📖 Syllabus",
    "content": " ",
    "url": "/syllabus/#-syllabus",
    "relUrl": "/syllabus/#-syllabus"
  },"13": {
    "doc": "📖 Syllabus",
    "title": "Table of contents",
    "content": ". | 📖 Syllabus . | About 🧐 | Getting Started 💻 . | Websites | Development Environment | . | Communication 💬 | Course Components 🍎 . | Lectures | Participation | Discussions | Labs | Projects | Office Hours | Weekly Schedule | . | Policies 💯 . | Grading | Late Policy, Slip Days, and Drops | Regrade Requests | Incompletes | A note on letter grades | . | Collaboration Policy and Academic Integrity 🤝 . | Why is academic integrity important? | What counts as cheating? | How can I be sure that my actions are NOT considered cheating? | . | Support 🫂 . | Accommodations | Diversity and Inclusion | Campus Resources | . | Acknowledgements 🙏 | . | . ",
    "url": "/syllabus/#table-of-contents",
    "relUrl": "/syllabus/#table-of-contents"
  },"14": {
    "doc": "📖 Syllabus",
    "title": "About 🧐",
    "content": "Data visualization is one of our most powerful cognitive tools to make sense of large amounts of data. Well-designed visualizations enable us to use visual processing rather than calculation, allowing to “see” patterns in data. DSC 106 is a project-centered course that covers fundamental principles and techniques in data visualization. By the end of the course, you will: . | Understand and apply key visualization techniques and theory. | Design, evaluate, and critique visualization designs. | Implement interactive data visualizations for the web using D3.js. | Develop a substantial visualization project. | . Prerequisites: DSC 80. ",
    "url": "/syllabus/#about-",
    "relUrl": "/syllabus/#about-"
  },"15": {
    "doc": "📖 Syllabus",
    "title": "Getting Started 💻",
    "content": "The course website, dsc106.com, will contain links to all course content. There are also a few things you’ll need to do to get set up. Websites . You’ll need to make accounts on the following sites: . | Ed: We’ll be using Ed as our course message and discussion board. More details are in the Communication section below. If you didn’t already get an invitation to our Ed course, sign up here. | Gradescope: You’ll submit all projects to Gradescope. This is where all of your grades will live as well. Most of the assignments will be coding assignments. Parts of these assignments will be manually graded, but most of them will be autograded. You should have received an email invitation for Gradescope, but if not please let us know as soon as possible (preferably via Ed). | GitHub: Like in DSC 30 and 80, you’ll access all course content (lecture slides and assignments) by pulling our course GitHub repository. That repo is here: https://github.com/dsc-courses/dsc106-wi24. In most assignments, you won’t need to push anything to GitHub. | Zoom (optional): To access remote office hours, if you’d like. | . Note that we will not be using Canvas for anything this quarter. Development Environment . As soon as you are able to, go follow the steps in the Tech Support page of the course website to set up your development environment for the course. ",
    "url": "/syllabus/#getting-started-",
    "relUrl": "/syllabus/#getting-started-"
  },"16": {
    "doc": "📖 Syllabus",
    "title": "Communication 💬",
    "content": "This quarter, we’ll be using Ed as our course message board. You will be added to Ed automatically; use the invite link in the section above if you weren’t added. If you have a question about anything to do with the course — if you’re stuck on a problem, didn’t understand something from lecture, want clarification on course logistics, or just have a general question about data science — you can make a post on Ed. We only ask that if your question includes some or all of an answer (even if you’re not sure it’s right), please make your post private so that others cannot see it. You can also post anonymously to other students if you prefer. Course staff will regularly check Ed and try to answer any questions that you have. You’re also encouraged to answer questions asked by other students. Explaining something is a great way to solidify your understanding of it! . Please don’t email individual staff members, just make a private or public Ed post instead. ",
    "url": "/syllabus/#communication-",
    "relUrl": "/syllabus/#communication-"
  },"17": {
    "doc": "📖 Syllabus",
    "title": "Course Components 🍎",
    "content": "Lectures . Lectures will be held in-person on Tuesday and Thursday from 3:30-4:50PM in [CENTR 115] and 5:00-6:20PM in [CENTR 119]. Attendance is required as part of your participation grade (detailed below). Lectures will be podcasted, and lecture slides will be posted before class. Participation . Developing expertise in data visualization also means being able to clearly communicate, critique, and explain data visualizations to others. To develop this skill, participation in lecture will count for 8% of your course grade. To fulfill the participation expectations for a particular week, you must attend both lectures. Participation will be tracked using online exercises given during class. The lowest two weeks will be dropped. Discussions . We will not be using the scheduled discussion sections for this course. We encourage you to attend office hours instead. Labs . There will be 7 lab assignments due weekly throughout the quarter. Each lab assignment is designed to be a walkthrough of practical material that you will use for your projects. Labs are meant to serve as worked examples: the solution code will be given to you as part of the lab. To receive credit for labs, you will need to complete the lab and then get checked off during office hours by a TA. The check off requirements will be clearly described at the end of each lab assignment. Each lab is worth the same amount, but the lowest lab will be dropped when calculating your final score. Labs will be released on Fridays and due on the following Fridays at 11:59PM. You will access labs by pulling the course GitHub repository. Projects . There will be 4 projects due throughout the quarter. The projects are open-ended and are the primary focus of the course. As such, our standards for grading will be similar to how portfolio pieces are evaluated for internship/research lab/job applications — we expect your best work! The first three projects are solo projects. For the final project, you may work in pairs. Working in Pairs . You may work together on the final project (and only the final project!) with a partner. If you work with a partner, you are both required to actively contribute to all parts of the project. You must both be working on the assignment at the same time together, either physically or virtually on a Zoom call. You are encouraged to follow the pair programming model, in which you work on just a single computer and alternate who writes the code and who thinks about the problems at a high level. In particular, you cannot split up the project and each work on separate parts independently. If you work with a partner: . | Only one partner needs to submit the project on Gradescope; this partner should add the other partner to their submission. | You and your partner will receive the same score on any submissions you make together. | . If you are unhappy with your partnership (e.g., if your partner does not keep in touch, does not come prepared to work on the assignment, or does not seem to be engaged in the process), please first address your concerns to your partner, and try to agree on what should be done to make the partnership work well for both of you. If that approach is not successful, explain the issues to the instructors, who will work with you and your partner to improve the situation. Note that you may not work with partners on lab assignments, however you’re encouraged to discuss all assignments with others at a conceptual level in office hours and study groups. Office Hours . To get help on assignments and concepts, course staff will be hosting several office hours per week. The majority of our office hours are held in-person, though a few are held remotely – if you’re able to, you’re strongly encouraged to attend in-person. See the Calendar tab of the course website for the most up-to-date schedule and instructions. Weekly Schedule . To summarize all of the events and deadlines, refer to this general weekly schedule (which is subject to change in any given week): . | Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | . |   |   | Lecture |   | Lecture |   |   | . |   |   |   |   |   | Lab and Project due |   | . ",
    "url": "/syllabus/#course-components-",
    "relUrl": "/syllabus/#course-components-"
  },"18": {
    "doc": "📖 Syllabus",
    "title": "Policies 💯",
    "content": "Grading . Here is how we’ll compute your grade: . | Component | Weight | Notes | . | Participation | 8% | 1% per week, 2 lowest weeks dropped | . | Labs | 12% | 2% per lab, 1 lowest lab dropped | . | Project 1 | 10% |   | . | Project 2 | 15% | 10% for submission, 5% for peer review | . | Project 3 | 15% | 10% for submission, 5% for peer review | . | Final Project | 40% |   | . Late Policy, Slip Days, and Drops . All assignments must be submitted by 11:59PM San Diego time on the due date to be considered on time. You may turn them in as many times as you like before the deadline, and only the most recent submission will be graded, so it’s a good habit to submit early and often. If you make a submission after the deadline, your assignment will be counted as late. You have 6 “slip days” to use throughout the quarter. A slip day extends the deadline of an assignment by 24 hours. The number of slip days you can use on an assignment depends on the kind of assignment: . | On labs, you may use up to 1 slip day. Since labs are due on Fridays and require a TA to check off, you may get checked off on the following Monday after a lab deadline to use 1 slip day. | On projects, you may use up to 2 slip days. These assignments will not be accepted more than 48 hours after the deadline. Note that you will not be able to use slip days on the Final Project Deliverables (due at the end of the quarter). | . Slip days are designed to be a transparent and predictable source of leniency in deadlines. You can use a slip day if you are too busy to complete an assignment on its original due date (or if you forgot about it). But slip days are also meant for things like the internet going down at 11:58 PM just as you go to submit your assignment. Slip days are meant to be used in exceptional circumstances, so you probably should not need to use all 6, but if you have something going on in your life that is impeding your ability to do your classwork on time, please reach out to us as soon as possible so we can work something out. Slip days are applied automatically at the end of the quarter, and you don’t need to ask in order to use one. It’s your responsibility to keep track of how many you have left. If you’ve run out of slip days and submit an assignment late, that assignment may still be graded, but you will receive a 0 on it when we calculate grades at the end of the quarter. However, in the event that you use all 6 days and submit another assignment late, we will allocate your slip days first to your projects (in chronological order), then to your labs (in chronological order), and then to other assignments. This is done to prevent you from receiving a 0 on, say, Project 4, if you’ve used all of your slip days on labs up until that point; in such a case, you’d instead receive a 0 on an earlier lab that isn’t weighted as much in your grade. Regrade Requests . If you feel that there in an error in grading, you may submit a regrade request within two days of the grades being released. If you do not submit a regrade request within two days, your original grade will be final. To submit a regrade request for a manually graded problem, make the regrade request directly on Gradescope. Note that part of your grade is clarity, so if your answer was mostly right but unclear you may still not be eligible for full credit. Incompletes . In the unfortunate circumstance that you become sick, suffer a loss, or otherwise experience a significant setback that is outside of your control, you may be eligible for an Incomplete grade, which allows you to complete the rest of the work at a later time. If you are experiencing challenges due to circumstances outside your control, please contact me ASAP and we can discuss the best course of action. Note that an Incomplete does not allow you to re-do work that has already been completed, only to do work that hasn’t been completed, so it’s best to reach out right away. A note on letter grades . The following is adapted from CSE 160 at the University of Washington. Grading for this class is not curved in the sense that the average is set at (say) a B+ and half of the class must receive a grade lower than that. If everyone does well and shows mastery of the material, everyone can receive an A (this would be awesome!). If no one does well (this is unlikely), then everyone can receive a C. Grading for this class is curved in the sense that we do not have a pre-defined mapping from project and exam scores to a final GPA. There is no pre-determined score (e.g., 90% of all possible points) that earns an A or a B or a C or any other grade. To determine the final grade, we will ask questions like “Did this student master the material?”. With that said, grades will not be any stricter than the standard grading scale (where an A+ is a 97+, A is 93+, A- is 90+, etc). For instance, the threshold for an “A” will never be higher than 93%. Try your best not to worry about grades, and we’ll reciprocate by being fair. We’re in this together 😎. ",
    "url": "/syllabus/#policies-",
    "relUrl": "/syllabus/#policies-"
  },"19": {
    "doc": "📖 Syllabus",
    "title": "Collaboration Policy and Academic Integrity 🤝",
    "content": "DSC 106 is known for being a rigorous but rewarding course. While you will be challenged this quarter, we will be offering you plenty of support through office hours and Ed. Make good use of these resources, and you will be able to succeed in this course. There is no excuse for cheating in this course. If you do cheat, we will enforce the UCSD Policy on Integrity of Scholarship. This means you will likely fail the course and the Dean of your college will put you on probation or suspend or dismiss you from UCSD. Students agree that by taking this course, their assignments may be submitted to third-party software to help detect plagiarism. Why is academic integrity important? . Academic integrity is an issue that is pertinent to all students on campus. When students act unethically by copying someone’s work, taking an exam for someone else, plagiarizing, etc., these students are misrepresenting their academic abilities. This makes it impossible for instructors to give grades (and for the University to give degrees) that reflect student knowledge. This devalues the worth of a UCSD degree for all students, making it imperative for the the campus as a whole to enforce that all members of this community are honest and ethical. We want your degree to be meaningful and we want you to be proud to call yourself a graduate of UCSD! . The UCSD Policy on Integrity of Scholarship and this syllabus list some of the standards by which you are expected to complete your academic work, but your good ethical judgment (or asking us for advice) is also expected as we cannot list every behavior that is unethical or not in the spirit of academic integrity. Ignorance of the rules will not excuse you from any violations. What counts as cheating? . In DSC 106, you can read books, surf the web, get inspiration from previous work or AI tools like ChatGPT, talk to your friends and the DSC 106 staff to get help understanding the concepts you need to know to complete your assignments. However, all code must be written by you (or, in the instance of projects, together with your partner). The following activities are considered cheating and are not allowed (not an exhaustive list): . | Using or submitting code acquired from other students (except from your pair programming partner during projects), the web, or any other resource not officially sanctioned by this course | Posting your code online, including on Ed, unless privately to instructors only | Having any other person complete any part of your assignment on your behalf | Completing an assignment on behalf of someone else | Providing code to any other student in the course | Splitting up project questions with your pair programming partner and each working on different questions | . The following activities are examples of appropriate collaboration and are allowed in (not an exhaustive list): . | (new) Using AI code generation tools, such as GitHub Copilot and ChatGPT, to help write your code | Discussing the general approach to solving labs or projects | Talking about problem-solving strategies or issues you ran into and how you solved them | Discussing the answers to exams with other students who have already taken the exam after the exam is complete | Using code provided in class, by the textbook or any other assigned reading or video, with attribution | Using Google to search for documentation. | Working together with other students on assignments without copying or sharing answers | Posting a question about your approach to a problem on Ed, without sharing your code | . How can I be sure that my actions are NOT considered cheating? . The best way to avoid problems is by using your best judgement and remembering to act with Honesty, Trust, Fairness, Respect, Responsibility, and Courage. Here are some suggestions for completing your work: . | Don’t look at or discuss the details of another student’s code for an assignment you are working on, and don’t let another student look at your code. | Don’t start with someone else’s code and make changes to it, or in any way share code with other students. | If you are talking to another student about an assignment, don’t take notes, and wait an hour afterward before you write any code. | . ",
    "url": "/syllabus/#collaboration-policy-and-academic-integrity-",
    "relUrl": "/syllabus/#collaboration-policy-and-academic-integrity-"
  },"20": {
    "doc": "📖 Syllabus",
    "title": "Support 🫂",
    "content": "Accommodations . From the Office for Students with Disabilities (OSD): . OSD works with students with documented disabilities to review documentation and determine reasonable accommodations. Disabilities can occur in these areas: psychological, psychiatric, learning, attention, chronic health, physical, vision, hearing, and acquired brain injuries, and may occur at any time during a student’s college career. We encourage you to contact the OSD as soon as you become aware of a condition that is disabling so that we can work with you. If you already have accommodations via OSD, please make sure that we receive your Authorization for Accommodation (AFA) letter by the end of Week 1 so that we can make arrangements for accommodations. Share your AFA letter with the instructor and the Data Science OSD Liaison, who can be reached at dscstudent@ucsd.edu. Diversity and Inclusion . We are committed to an inclusive learning environment that respects our diversity of perspectives, experiences, and identities. Our goal is to create a diverse and inclusive learning environment where all students feel comfortable and can thrive. If you have any suggestions as to how we could create a more inclusive setting, please let us know. We also expect that you, as a student in this course, will honor and respect your classmates, abiding by the UCSD Principles of Community. Please understand that others’ backgrounds, perspectives and experiences may be different than your own, and help us to build an environment where everyone is respected and feels comfortable. Campus Resources . If there is an issue you feel uncomfortable speaking with us or are searching for help on a specific concern, there are several campus resources available to you, including: . | UCSD Counseling and Psychological Services (CAPS) | Hub Basic Needs Center | Office for Students with Disability (OSD) | Office for Prevention of Sexual Harrassment and Discrimination | . ",
    "url": "/syllabus/#support-",
    "relUrl": "/syllabus/#support-"
  },"21": {
    "doc": "📖 Syllabus",
    "title": "Acknowledgements 🙏",
    "content": "Materials for this course have been adapted from classes taught by Soohyun Nam Liao and Jared Wilber at UCSD, Jeffrey Heer and Leilani Battle at UW, Arvind Satyanarayan at MIT, and Maneesh Agrawala and Michael Bernstein at Stanford University. ",
    "url": "/syllabus/#acknowledgements-",
    "relUrl": "/syllabus/#acknowledgements-"
  },"22": {
    "doc": "📖 Syllabus",
    "title": "📖 Syllabus",
    "content": " ",
    "url": "/syllabus/",
    "relUrl": "/syllabus/"
  },"23": {
    "doc": "🙋‍♂️ Tech Support",
    "title": "🙋‍♂️ Tech Support",
    "content": " ",
    "url": "/tech_support/",
    "relUrl": "/tech_support/"
  },"24": {
    "doc": "🙋‍♂️ Tech Support",
    "title": "Table of contents",
    "content": ". | Introduction | Working Locally (Recommended) . | Mamba | Replicating the Gradescope Environment | mamba vs. conda vs. pip | Git | Choosing a Text Editor or IDE | . | Working Remotely via DataHub . | ⚠️ Warning! | Installing or Updating Python Packages | JupyterLab | Git | Troubleshooting DataHub | . | . ",
    "url": "/tech_support/#table-of-contents",
    "relUrl": "/tech_support/#table-of-contents"
  },"25": {
    "doc": "🙋‍♂️ Tech Support",
    "title": "Introduction",
    "content": "Assignments in DSC 80 are mostly coding assignments, so it’s important to make sure that your computing environment is set up properly. There are two ways to go about things: you can set up a local environment or use a remote environment that is largely pre-configured. On this page, we’ll talk about both options. Writing code locally, on your personal computer, is our preferred option. We won’t lie – it involves a little more time to set up and a steeper learning curve. But in the long run, you’ll likely find the local environment more comfortable and faster since you can customize it to your own needs. Additionally, setting up your own local Python environment is something you’ll be expected to do when working as a data scientist, so it’s a good idea to start now. There has been a lot written about how to set up a Python environment, so we won’t reinvent the wheel. This page will only be a summary; Google will be your main resource. But always feel free to come to a staff member’s office hours if you have a question about setting up your environment, using Git, or similar — we’re here to help. ",
    "url": "/tech_support/#introduction",
    "relUrl": "/tech_support/#introduction"
  },"26": {
    "doc": "🙋‍♂️ Tech Support",
    "title": "Working Locally (Recommended)",
    "content": "Working locally simply refers to developing code using software installed on your own machine. For this class, the software you'll need includes Python 3.8, a few specific Python packages, Git, and a text editor. Mamba . Mamba is a fast, robust, and cross-platform package manager. Serving as a powerful alternative to the traditional pip install command, mamba install command ensures seamless compatibility between package versions, mitigating the risk of conflicts within your development environment. If you should need to install a new Python package, you can use the mamba command. Inside the terminal, type mamba install &lt;package_name&gt;, where &lt;package_name&gt; is replaced by the name of the package you want to install, and hit enter. Replicating the Gradescope Environment . Gradescope has a package environment which it uses to autograde your work. It is advised to create the same environment so that there are no issues due to version changes during development vs. evaluation. Please follow the below steps to create the environment with required packages. | 1. In Terminal, install mamba by running one of the install scripts. | . Unix-like platforms (Mac OS &amp; Linux): Download the installer using curl or wget or your favorite program and run the script. curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\" bash Miniforge3-$(uname)-$(uname -m).sh . or . wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\" bash Miniforge3-$(uname)-$(uname -m).sh . Windows: Download and execute the Windows installer. Follow the prompts, taking note of the options to “Create start menu shortcuts” and “Add Miniforge3 to my PATH environment variable”. The latter is not selected by default due to potential conflicts with other software. Without Miniforge3 on the path, the most convenient way to use the installed software (such as commands mamba) will be via the “Miniforge Prompt” installed to the start menu. run: start /wait \"\" Miniforge3-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\\Miniforge3 . | 2. Download the environment.yml file. | 3. In Terminal, create a new conda environment: mamba env create -f environment.yml. Notice that if you’ve put environment.yml in your Downloads folder or Desktop, you should replace environment.yml with the path to the file, for example: mamba env create -f /Users/yourusername/Desktop/environment.yml. Otherwise, you might get an error saying environment.yml does not exist. | 4. Activate the environment: mamba activate dsc80. If you’re using VSCode, you should select the Python kernel corresponding to the dsc80 environment to use it. | . Every time you work on DSC 80, activate this environment by running mamba activate dsc80 in your terminal. To open a Jupyter Notebook, use the jupyter notebook command in your terminal. mamba vs. conda vs. pip . Setting up a Python development environment is a crucial step for ensuring consistency and compatibility of your work. An environment is essentially a self-contained space where your project dependencies, libraries, and their respective versions are isolated from the rest of your system. While pip is a widely used package installer, it lacks built-in support for creating isolated environments. This limitation makes it challenging to maintain version consistency and avoid conflicts between packages. Consequently, we do not recommend relying solely on pip install for environment management, as it may inadvertently introduce incompatible package versions. Conda, on the other hand, is a powerful tool that not only installs packages but also manages environments effortlessly. It allows you to create isolated environments and ensures compatibility among the packages within those environments. Mamba is a wrapper around conda, designed to optimize the installation process, making it notably faster than traditional conda installations. Git . All of our course materials, including your assignments, are hosted on GitHub in this Git repository. This means that you’ll need to download and use Git in order to work with the course materials. Git is a version control system. In short, it is used to keep track of the history of a project. With Git, you can go back in time to any previous version of your project, or even work on two different versions (or \"branches\") in parallel and \"merge\" them together at some point in the future. We'll stick to using the basic features of Git in DSC 80. There are Git GUIs, and you can use them for this class. You can also use the command-line version of Git. To get started, you'll need to \"clone\" the course repository. The command to do this is: . git clone https://github.com/dsc-courses/dsc80-2023-fa . This will copy the repository to a directory on your computer. To bring in the latest version of the repository, run git pull in your local repository. This will not overwrite your work. In fact, Git is designed to make it very difficult to lose work (although it's still possible!). Merge Conflicts . You might face issues when using git pull regarding merge issues and branches. This is caused by files being updated on your side while we are also changing the Git repository by pushing new assignments on our side. Here are some steps you can follow to resolve it: . NOTE: Whenever working with GitHub pulls, merges, etc., it’s a good idea to save your important work locally so that if you accidentally overwrite your files you still have the work saved. Save your work locally before following the steps below. | git status shows the current state of your Git working directory and staging area. It’s a good sanity check to start with. You will probably see your project and lab files that you have worked on. | git add . will add all your files to be ready to commit. | git commit -m \"some message of your choice\" will commit the files, with some description in the quotations. This can be whatever you want, it won’t matter. | . At this stage, if you git pull, it should work. You should double-check that you have new files, as well as that your old files are unchanged. If they are changed then you should be able to just copy-paste from your local backup. If this does not work then you may have merge conflicts, follow the next steps: . | git checkout --theirs [FILENAME] will tell git that whenever a conflict occurs in [FILENAME] to keep your version. Run this for each file with a conflict. | git add [FILENAME] to mark each file with a conflict as resolved. | git rebase --continue or git merge, depending on the setup. | . Choosing a Text Editor or IDE . In this class, you will need to use a combination of editors for doing your assignments: The python files should be developed with an IDE (for syntax highlighting and running doctests) and the data/results should be analyzed/presented in Jupyter Notebooks. Below is an incomplete list of IDEs you might want to try. For more information about them, feel free to ask the course staff. If you’re curious, Suraj uses VSCode to edit .py files and the vanilla Jupyter environment to edit notebooks. | The JupyterLab text editor: see below. Can be used to edit both notebooks and .py files. | VSCode: Microsoft Visual Studio Code. Currently very popular, and can also be used to edit both notebooks and .py files. | sublime: A favorite text editor of hackers, famous for its multiple cursors. A good, general-purpose choice. | atom: GitHub’s editor. Pretty nice fully featured IDE. Can only work locally. | PyCharm (IntelliJ): Those who feel at home coding Java. Can only work locally. | nano: available on most unix commandlines (e.g. DataHub Terminal). If you use this for more than changing a word or two, you'll hate your life. | (neo)vim: lightweight, productive text-editor that might be the most efficient way to edit text, if you can ever learn how to use it. Beware opening vim, as you may never figure out how to quit (literally). Justin Eldridge’s text editor of choice. | emacs: A text editor for those who prefer a life of endless toil. Endlessly customizable, it promises everything, but you’re never good enough to deliver. Its keyboard shortcuts are guaranteed to give you carpal tunnel. Aaron Fraenkel’s text editor of choice. | . ",
    "url": "/tech_support/#working-locally-recommended",
    "relUrl": "/tech_support/#working-locally-recommended"
  },"27": {
    "doc": "🙋‍♂️ Tech Support",
    "title": "Working Remotely via DataHub",
    "content": "Working remotely means using an environment that someone else set up for you on a computer far, far away, usually through the browser. This is the way you wrote code in DSC 10, for instance. There's nothing wrong with this, per se, and it is simpler, but you should think of this option as developing with \"training wheels\". Eventually, you will need to learn how to set up your own Python environment, and now is as good a time as any. There are servers available to use at datahub.ucsd.edu. These are a lot like the DataHub servers that you used in DSC 10, however they are customized for this course. After logging in with your UCSD account, you will be taken the familiar juptyer landing page. The server you are logged into has ~4GB of RAM available, and has Python with all the necessary packages. ⚠️ Warning! . DataHub outages are not uncommon, and they can be expected to occur once or twice per quarter (sometimes more). Outages typically last for a few hours or less, but they can prevent you from working on your assignment. Since we do not manage DataHub, we cannot make any guarantees about its availability. DataHub crashes that prevent you from turning in or working on your assignment near the deadline are typically handled via the usual slip day mechanism. If DataHub has been down for a long time (more than 24 hours), let us know and we'll consider a blanket extension – though this has very rarely (never?) happened. Our advice is to use a local development environment, or to at least have one as available as a backup option. If you decide to use DataHub as your first choice, you should keep an extra slip day or two in reserve in case the server crashes. Installing or Updating Python Packages . To update a package (e.g. pandas) on DataHub, you'll need to use the command line. To do this, open “New &gt; Terminal” and type: . mamba install --user --upgrade pandas . followed by the enter key to run the command. One package that you'll likely need to install is otter-grader. This package provides the autograder that checks your answers in the labs and projects. JupyterLab . The remote servers have a development environment installed on them, however, it’s non-intuitive how to access it. Once on the landing page, the url should read something like: . https://datahub.ucsd.edu/user/USER/tree . You can access the IDE (integrate development environment) by changing \"tree\" to \"lab\". This brings up JupyterLab. The url should look something like this: . https://datahub.ucsd.edu/user/USER/lab . For more information on this IDE, you can see read about it here. From within JupyterLab, you can: . | Use a Python console | Run Jupyter notebooks | Use a terminal (e.g. to pull git repos) | Develop Python code in .py files | . Git . Whether you work locally or use DataHub, you’ll need to pull assignments from GitHub. If you work on DataHub, you’ll have to pull from GitHub using the command-line. To do this, open “New &gt; Terminal” and, to get the course repository for the first time, type: . git clone https://github.com/dsc-courses/dsc80-2023-fa . Then, open up the file-tree in the original Jupyter tab, and you should see all the course files now there. If you have already cloned the repository, and just want to get the latest files, type git pull and you should see the updated files. Troubleshooting DataHub . What if I accidentally clicked a different class instead of DSC 80 when logging into DataHub, or what if my DataHub doesn’t load? . | If you are already logged into DataHub, click “Control Panel” in the top right. (If your DataHub never launched in the first place, proceed to the next step.) . | In the toolbar at appears at datahub.ucsd.edu, click “Services” then click “manual-resetter”, then click “Reset”. If a pop-up box appears, that’s okay. | Log back into DataHub again and it should allow you to select a course – select DSC 80. | . ",
    "url": "/tech_support/#working-remotely-via-datahub",
    "relUrl": "/tech_support/#working-remotely-via-datahub"
  }
}
